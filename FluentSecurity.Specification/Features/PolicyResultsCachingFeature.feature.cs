// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FluentSecurity.Specification.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Caching of PolicyResults")]
    public partial class CachingOfPolicyResultsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PolicyResultsCachingFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Caching of PolicyResults", "In order to improve performance of applications using FluentSecurity\r\nAs a develo" +
                    "per\r\nI want the ability to cache results of policies", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cache results of policy for all controllers")]
        public virtual void CacheResultsOfPolicyForAllControllers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cache results of policy for all controllers", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the cache strategy of all controllers is set to PerHttpRequest for WriterPolicy");
#line 9
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 10
 testRunner.Then("it should cache result PerHttpRequest");
#line 11
 testRunner.Then("it should cache result with key \"*_*_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cache results of policy for specific controller")]
        public virtual void CacheResultsOfPolicyForSpecificController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cache results of policy for specific controller", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("the cache strategy of BlogController is set to PerHttpRequest for WriterPolicy");
#line 17
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 18
 testRunner.Then("it should cache result PerHttpRequest");
#line 19
 testRunner.Then("it should cache result with key \"BlogController_*_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cache results of policy for specific controller and action")]
        public virtual void CacheResultsOfPolicyForSpecificControllerAndAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cache results of policy for specific controller and action", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("the cache strategy of BlogController AddPost is set to PerHttpRequest for WriterP" +
                    "olicy");
#line 25
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 26
 testRunner.Then("it should cache result PerHttpRequest");
#line 27
 testRunner.Then("it should cache result with key \"BlogController_AddPost_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Override cache lifecycle of policy for specific controller and action")]
        public virtual void OverrideCacheLifecycleOfPolicyForSpecificControllerAndAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Override cache lifecycle of policy for specific controller and action", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("the cache strategy of BlogController is set to PerHttpRequest for WriterPolicy");
#line 33
 testRunner.And("the cache strategy of BlogController AddPost is set to DoNotCache for WriterPolic" +
                    "y");
#line 34
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 35
 testRunner.Then("it should not cache result");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Override cache lifecyle of policy for specific controller")]
        public virtual void OverrideCacheLifecyleOfPolicyForSpecificController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Override cache lifecyle of policy for specific controller", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("the cache strategy of BlogController AddPost is set to PerHttpSession for WriterP" +
                    "olicy");
#line 41
 testRunner.And("the cache strategy of BlogController is set to PerHttpRequest for WriterPolicy");
#line 42
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 43
 testRunner.Then("it should cache result PerHttpRequest");
#line 44
 testRunner.Then("it should cache result with key \"BlogController_*_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Override cache level of policy for all controllers")]
        public virtual void OverrideCacheLevelOfPolicyForAllControllers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Override cache level of policy for all controllers", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("the cache strategy of all controllers is set to PerHttpRequest by ControllerActio" +
                    "n for WriterPolicy");
#line 49
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 50
 testRunner.Then("it should cache result PerHttpRequest");
#line 51
 testRunner.Then("it should cache result with key \"BlogController_AddPost_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Override cache level of policy for specific controller")]
        public virtual void OverrideCacheLevelOfPolicyForSpecificController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Override cache level of policy for specific controller", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("the cache strategy of BlogController is set to PerHttpRequest by ControllerAction" +
                    " for WriterPolicy");
#line 57
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 58
 testRunner.Then("it should cache result PerHttpRequest");
#line 59
 testRunner.Then("it should cache result with key \"BlogController_AddPost_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Override cache level of policy for specific controller action")]
        public virtual void OverrideCacheLevelOfPolicyForSpecificControllerAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Override cache level of policy for specific controller action", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("the cache strategy of BlogController AddPost is set to PerHttpRequest by Policy f" +
                    "or WriterPolicy");
#line 65
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 66
 testRunner.Then("it should cache result PerHttpRequest");
#line 67
 testRunner.Then("it should cache result with key \"*_*_WriterPolicy\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clear cache strategies for specific controller")]
        public virtual void ClearCacheStrategiesForSpecificController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear cache strategies for specific controller", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given("the cache strategy of all controllers is set to PerHttpRequest for WriterPolicy");
#line 73
 testRunner.And("the cache strategies of BlogController is cleared");
#line 74
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 75
 testRunner.Then("it should not cache result");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clear cache strategies for specific controller action")]
        public virtual void ClearCacheStrategiesForSpecificControllerAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear cache strategies for specific controller action", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("the cache strategy of all controllers is set to PerHttpRequest for WriterPolicy");
#line 81
 testRunner.And("the cache strategies of BlogController AddPost is cleared");
#line 82
 testRunner.When("enforcing WriterPolicy for BlogController AddPost");
#line 83
 testRunner.Then("it should not cache result");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
